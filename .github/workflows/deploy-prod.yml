name: Deploy to Prod

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

# SETUP FRONTEND APP
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Angular CLI
      run: npm install -g @angular/cli

    - name: Install dependencies
      run: npm install
      working-directory: ./frontend

    - name: Update environment.ts with secrets
      run: |
        echo "export const environment = {
          production: true,
          apiUrl: 'https://prod-function-app-tsalesman.azurewebsites.net',
          apiCode: '${{ secrets.API_CODE }}',
          gMapsAPIKey: '${{ secrets.GMAPS_API_KEY }}'
        };" > ./src/environments/environment.prod.ts

    - name: Make replace-env.sh executable
      run: chmod +x ./frontend/replace-env.sh

    - name: Replace GMAPS_API_KEY in index.html
      run: ./replace-env.sh
      env:
        GMAPS_API_KEY: ${{ secrets.GMAPS_API_KEY }}
      working-directory: ./frontend

    - name: Build Angular app
      run: ng build --prod
      working-directory: ./frontend

    - name: Upload to Azure Storage
      env:
        AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      run: |
        az storage blob upload-batch --account-name $AZURE_STORAGE_ACCOUNT --overwrite --destination '$web' --source ./frontend/dist/frontend


# SETUP BACKEND APP

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: Build C# app
      run: dotnet build --configuration Release
      working-directory: ./backend

    - name: Publish C# app
      run: dotnet publish --configuration Release --output ./publish
      working-directory: ./backend

    - name: Deploy to Azure Function App
      uses: azure/functions-action@v1
      with:
        app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
        package: ./backend/publish
        publish-profile: ${{ secrets.AZURE_FUNCTION_APP_PUBLISH_PROFILE }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

# SETUP DEVOPS
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init
      working-directory: ./terraform

    - name: Apply Terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform apply -var-file="prod.tfvars" -auto-approve -lock=false
      working-directory: ./terraform