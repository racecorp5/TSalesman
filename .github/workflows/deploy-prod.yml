name: Deploy to Prod

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

    - name: Azure Login
      uses: azure/login@v2
      with:
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Angular CLI
      run: npm install -g @angular/cli

    - name: Install dependencies
      run: npm install
      working-directory: ./frontend

    - name: Create .env file with GMAPS_API_KEY
      run: echo "GMAPS_API_KEY=${{ secrets.GMAPS_API_KEY }}" > ./frontend/.env

    - name: Build Angular app
      run: ng build --prod
      working-directory: ./frontend

    - name: Upload Angular build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: angular-build
        path: ./frontend/dist

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: Build C# app
      run: dotnet build --configuration Release
      working-directory: ./backend

    - name: Publish C# app
      run: dotnet publish --configuration Release --output ./publish
      working-directory: ./backend

    - name: Upload C# build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: csharp-build
        path: ./backend/publish

    # - name: Azure Login
    #   uses: azure/login@v2
    #   with:
    #     auth-type: SERVICE_PRINCIPAL
    #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #     # creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./terraform

    - name: Apply Terraform
      run: terraform apply -var-file="prod.tfvars" -auto-approve
      working-directory: ./terraform